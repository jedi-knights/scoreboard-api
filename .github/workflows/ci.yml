name: CI - API Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  TEST_DATABASE: sqlite

jobs:
  # Lint and Code Quality
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: |
          if [ "$(npm run lint:fix --silent | grep -c 'problems')" -gt 0 ]; then
            echo "❌ Code formatting issues found. Run 'npm run lint:fix' to resolve."
            exit 1
          fi
          echo "✅ Code formatting is correct"

  # Unit Tests (Fast)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration Tests (SQLite)
  integration-tests-sqlite:
    name: Integration Tests (SQLite)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests with SQLite
        run: npm run test:integration
        env:
          TEST_DATABASE: sqlite

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration-tests-sqlite
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration Tests (PostgreSQL with Testcontainers)
  integration-tests-postgres:
    name: Integration Tests (PostgreSQL)
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0.5
        options: --user root
        env:
          DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests with PostgreSQL
        run: npm run test:integration
        env:
          TEST_DATABASE: postgres
        timeout-minutes: 10

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration-tests-postgres
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level=moderate 2>&1 | grep -q "found"; then
            echo "❌ Security vulnerabilities found"
            npm audit --audit-level=moderate
            exit 1
          fi
          echo "✅ No security vulnerabilities found"

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests-sqlite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t scoreboard-api:test .
          echo "✅ Docker image built successfully"

      - name: Test Docker image
        run: |
          # Test that the image can start
          docker run --rm -d --name test-container -p 3000:3000 scoreboard-api:test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/health/liveness || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          
          echo "✅ Docker image test passed"

  # API Validation
  api-validation:
    name: API Validation
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API in background
        run: |
          npm start &
          sleep 15
          echo "API started in background"

      - name: Run API validation tests
        run: |
          # Test health endpoints
          curl -f http://localhost:3000/health/liveness
          curl -f http://localhost:3000/health/readiness
          curl -f http://localhost:3000/health
          
          # Test root endpoint
          curl -f http://localhost:3000/
          
          # Test games API endpoints
          curl -f http://localhost:3000/api/v1/games
          
          echo "✅ All API endpoints validated"

      - name: Stop API
        run: |
          pkill -f "node src/index.js" || true
          echo "API stopped"

  # Performance & Load Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API
        run: |
          npm start &
          sleep 15
          echo "API started"

      - name: Run performance tests
        run: |
          # Test response time under load
          for i in {1..10}; do
            start_time=$(date +%s%N)
            curl -s -f http://localhost:3000/health/liveness > /dev/null
            end_time=$(date +%s%N)
            response_time=$(( (end_time - start_time) / 1000000 ))
            echo "Request $i: ${response_time}ms"
          done
          
          echo "✅ Performance test completed"

      - name: Stop API
        run: |
          pkill -f "node src/index.js" || true

  # Final Validation
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests-sqlite, integration-tests-postgres, security-audit, docker-build, api-validation, performance-test]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: |
          # Check if coverage meets 80% threshold
          coverage=$(npm run test:coverage --silent | grep -oP 'All files[^|]*\|\s*\K\d+' | head -1)
          if [ "$coverage" -lt 80 ]; then
            echo "❌ Coverage is below 80% threshold: ${coverage}%"
            exit 1
          fi
          echo "✅ Coverage threshold met: ${coverage}%"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: final-validation
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('./coverage/lcov.info', 'utf8');
            const lines = coverage.split('\n');
            const summary = lines.find(line => line.startsWith('SF:'));
            
            const comment = `## 🧪 CI Validation Complete
            
            ### ✅ All checks passed successfully!
            
            - **Linting**: ✅ Code quality standards met
            - **Unit Tests**: ✅ Business logic validated
            - **Integration Tests**: ✅ API endpoints working
            - **Security**: ✅ No vulnerabilities found
            - **Docker**: ✅ Container builds and runs
            - **Performance**: ✅ API responds within acceptable time
            - **Coverage**: ✅ Test coverage meets 80% threshold
            
            ### 📊 Test Coverage
            Coverage report has been uploaded to Codecov.
            
            ### 🚀 Ready for Review
            This PR is ready for review and merge.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [final-validation]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "❌ CI validation failed!"
          echo "Please check the workflow logs for details."
          echo "Common issues:"
          echo "- Test failures"
          echo "- Linting errors"
          echo "- Security vulnerabilities"
          echo "- Coverage below threshold"
